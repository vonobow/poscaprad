%!
(ttf-vert.ps) runlibfile

% <key> <default> defaultload <value>
/defaultload {
	exch dup where {
		exch get exch pop
	} {
		pop
	} ifelse
} bind def

% <dict> <key> knownget ( <val> true ) | false
% knownget has same functionality as .knownget in GS.
/knownget {
	2 copy known { get true } { pop pop false } ifelse
} bind def

% <dict> <key> <default> defaultget <value>
/defaultget {
	3 1 roll knownget {
		exch pop
	} if
} bind def

% ( array | any ) <alength> num
/alength {
	dup type /arraytype eq { length } { pop 1 } ifelse
} bind def

% ( array | any ) num <aget> any
/aget {
	1 index type /arraytype eq { get } { 0 ne { trap } if } ifelse
} bind def

% str1 str2 <expandstrrange> str1 str1+1 ... str2
/expandstrrange {
	3 dict begin
	0 get /e exch def
	0 get /b exch def
	b 1 e { /i exch def 1 string dup 0 i put } for
	end
} bind def

% [ a b ... ] value <expandarrayval>
%	a value
%	b value
%	...
/expandarrayval {
	1 dict begin
	/v exch def
	{ v } forall
	end
} bind def

% str <charbytes> num
/charbytesEUC {
	0 get 16#80 lt {
		1
	} {
		2
	} ifelse
} bind def

/charbytesUTF8 {
	0 get dup 16#80 lt {
		1
	} { dup 16#c0 lt {
		/charbyteUTF8 trap
	} { dup 16#e0 lt {
		2
	} { dup 16#f0 lt {
		3
	} { dup 16#f8 lt {
		4
	} {
		/charbyteUTF8 trap
	} ifelse } ifelse } ifelse } ifelse } ifelse
	exch pop
} bind def

/substtable <<
	(1)	(一)
	(2) (二)
	(3) (三)
	(4) (四)
	(5) (五)
	(6) (六)
	(7) (七)
	(8) (八)
	(9) (九)
	(0) (〇)
	[ (A) (Z) expandstrrange ] /rot expandarrayval
	[ (a) (z) expandstrrange ] /rot expandarrayval
	(-) [ /rot /hfont /drawline-hyphen-font ]
>> def

% /rot: drawline-rotfont、なければdrawline-hfont
% /center: drawline-centerfont、なければdrawline-hfont

% str num <splitstring> str1 str2
/splitstring {
	2 dict begin
	/n exch def
	/s exch def
	s 0 n getinterval
	s n s length n sub getinterval
	end
} bind def

% str1 str2 <concatstring> str
/concatstring {
	2 dict begin
	/t exch def
	/s exch def
	s length t length add string
	dup 0 s putinterval
	dup s length t putinterval
	end
} bind def

% - <extractchar> -
/extractchar {
	str dup charbytesproc splitstring /str exch def /c exch def
} bind def

% - <drawline-strlist> ... bool
%	1文字処理し、スタックに結果を残す。
%	入力はextractcharで得る。
%	置換テーブルの処理が必要な場合はスタックトップにtrueを置く。
%	現在の辞書のcc（文字数）・subst（置換の有無）・rot（回転の有無）が
%	使用される。
/drawline-strlist {
	extractchar
	c (%) eq {
		extractchar
		c (\() eq {
			% %(...%) ひとまとめにして /center 文字列 false を置く。
			/s () def
			{
				extractchar
				c (%) eq {
					extractchar
					c (%) eq {
						/s s c concatstring def
					} { c (\)) eq {
						exit
					} {
						/drawline3 trap
					} ifelse } ifelse
				} {
					/s s c concatstring def
				} ifelse
			} loop
			/center s false
			/cc cc 1 add def
		} { c ({) eq {
			% 置換無効、回転有効にして false を置く。
			/subst false def
			/rot true def
			false
		} { c (}) eq {
			% 置換有効、回転無効に戻して false を置く。
			/subst true def
			/rot false def
			false
		} { c (%) eq {
			% %そのもの。
			c true
			/cc cc 1 add def
		} {
			/drawline1 trap
		} ifelse } ifelse } ifelse } ifelse
	} {
		% 通常の文字。
		c true
		/cc cc 1 add def
	} ifelse
} bind def

% ... bool drawline-subst
% substtableを引いて処理を行う。
%	rot・substが使用される。
/drawline-subst {
	/s exch def
	/r rot def
	substtable s known {
		% 置換テーブルに要素がみつかった。
		% 配列の場合とリテラルの場合があるが、aget・alengthで
		% 共通に処理する。
		/t substtable s get def
		/i 0 def
		{
			i t alength ge { exit } if
			/v t i aget def
			/i i 1 add def
			v type /stringtype eq {
				% 置換先文字列
				subst { /s v def } if
			} { v /rot eq {
				% 回転の指定
				/r true def
			} { v /hfont eq {
				% 横書きフォントの指定
				% 指定されたものが名前で、辞書から見つかれば
				% そのオブジェクトを使う。そうでなければ
				% フォントを探す。指定されたものがオブジェクトなら
				% そのオブジェクトをそのまま使う。
				/w t i aget def
				/i i 1 add def
				w type /nametype eq w type /stringtype eq or {
					w where {
						w get /hfont exch
					} {
						/hfont w findfont
					} ifelse
				} {
					/hfont w
				} ifelse
			} {
				/drawline4 trap
			} ifelse } ifelse } ifelse
		} loop
	} if
	% /rotは必要ならば1文字ごとに出る。
	r { /rot } if
	s
} bind def

% strlistarray heightstr <drawline-draw> -
/drawline-draw {
	1 dict begin
	/hstr exch def
	/strlist exch def
	/center false def
	/rot false def
	/cfont /drawline-centerfont drawline-hfont defaultload def
	/rfont /drawline-rotfont drawline-hfont defaultload def
	/rf rfont def
	/hf false def
	strlist {
		hf {
			% 直前が/hfontだった場合の処理。
			% フォントはすでにオブジェクトに展開されている。
			/rf exch def
			/hf false def
		} { dup type /stringtype eq {
			% 文字発見。モードに従って描画し、モードを元に戻す。
			rot {
				rf exch false << /HeightString hstr >>
				ttfVerticalRotateShow
			} { center {
				cfont exch ttfVerticalCenterShow
			} {
				show
			} ifelse } ifelse
			/center false def
			/rot false def
			/rf rfont def
		} { dup /center eq {
			/center true def
		} { dup /rot eq {
			/rot true def
		} { dup /hfont eq {
			% 次のループで/rfにフォントが取り込まれる。
			/hf true def
		} {
			/drawline2 trap
		} ifelse } ifelse } ifelse } ifelse } ifelse
	} forall
	end
} bind def
% str height [ optdict ] <drawline> -
% 	str:
%		%%: %そのもの
% 		%(): 続くnバイトを横書きする。全体で縦方向1文字送り扱い。
% 		%!: 次の%!まで文字置換の対象としない。それぞれ縦1文字送り。
% 		%@: 次の%@まで右90度回転して表示。
%			元々の文字の横幅が縦方向の送り幅になる。
%	optdict:
%		/align ident
%			/justify: 均等割り。長さが足りなければ文字間にスペースを入れる
%				長さが長い場合は縮小される。
%			/bottom: 下寄せ。
%		/tab 辞書 (output)
%			タブ位置を示す。
%		/HeightString str
%			ttfVerticalRotateShowに渡すHeightString。デフォルトは(fg)
/drawline {
	1 dict begin

	% パラメーター取得
	dup type /dicttype eq { /opt exch def } { /opt 0 dict def } ifelse
	/height exch def
	/str exch def
	/hstr opt /HeightString (fg) defaultget def

	% 文字列を分解して配列に、置換する文字列は置換。
	/cc 0 def	% charactor count
	/subst true def
	/rot false def
	/strlist [
		{
			str length 0 eq { exit } if
			drawline-strlist {
				drawline-subst
			} if
		} loop
	] def

	strlist hstr drawline-draw

	end
} bind def

/charbytesproc { charbytesEUC } def

/DFKaiSho-Md /EUC-H ttfComposeVerticalFont 18 scalefont setfont
/drawline-hfont /DFPKaiSho-Md-EUC-H findfont 18 scalefont def
/drawline-centerfont /Times-Roman findfont 16 scalefont def
/drawline-hyphen-font /Courier findfont 18 scalefont def
100 700 moveto
(オーシャンビューが素敵なレジデンスAkamoz%(VIII%)123-10号室) 10 drawline
showpage
quit
