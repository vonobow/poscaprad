%!
(ttf-vert.ps) runlibfile

% <dict> <key> <default> defaultget <value>
/defaultget {
	3 1 roll knownget {
		exch pop
	} if
} bind def

% ( array | any ) <alength> num
/alength {
	dup type /arraytype eq { length } { pop 1 } ifelse
} bind def

% ( array | any ) num <aget> any
/aget {
	1 index type /arraytype eq { get } { 0 ne { trap } if } ifelse
} bind def

% str1 str2 <expandstrrange> str1 str1+1 ... str2
/expandstrrange {
	3 dict begin
	0 get /e exch def
	0 get /b exch def
	b 1 e { /i exch def 1 string dup 0 i put } for
	end
} bind def

% [ a b ... ] value <expandarrayval>
%	a value
%	b value
%	...
/expandarrayval {
	1 dict begin
	/v exch def
	{ v } forall
	end
} bind def

% str num <splitstring> str1 str2
/splitstring {
	2 dict begin
	/n exch def
	/s exch def
	s 0 n getinterval
	s n s length n sub getinterval
	end
} bind def

% str <charbytes> num
/charbytesEUC {
	0 get 16#80 lt {
		1
	} {
		2
	} ifelse
} bind def

/charbytesUTF8 {
	0 get dup 16#80 lt {
		1
	} { dup 16#c0 lt {
		/charbyteUTF8 trap
	} { dup 16#e0 lt {
		2
	} { dup 16#f0 lt {
		3
	} { dup 16#f8 lt {
		4
	} {
		/charbyteUTF8 trap
	} ifelse } ifelse } ifelse } ifelse } ifelse
	exch pop
} bind def

/substtable <<
	(1)	(一)
	(2) (二)
	(3) (三)
	(4) (四)
	(5) (五)
	(6) (六)
	(7) (七)
	(8) (八)
	(9) (九)
	(0) (〇)
	[ (A) (Z) expandstrrange ] /rot expandarrayval
	[ (a) (z) expandstrrange ] /rot expandarrayval
	(-) [ /rot /hfont /drawline-hyphen-font ]
>> def

5 dict begin

% - <extractchar> -
/extractchar {
	str dup charbytesproc splitstring /str exch def /c exch def
} bind def

% - <drawline-strlist> ... bool
%	1文字処理し、スタックに結果を残す。
%	入力はextractcharで得る。
%	置換テーブルの処理が必要な場合はスタックトップにtrueを置く。
%	現在の辞書のcc（文字数）・subst（置換の有無）・rot（回転の有無）が
%	使用される。
/drawline-strlist {
	extractchar
	c (%) eq {
		extractchar
		c (\() eq {
			% %(...%) ひとまとめにして /center 文字列 false を置く。
			/s () def
			{
				extractchar
				c (%) eq {
					extractchar
					c (%) eq {
						/s s c strcat def
					} { c (\)) eq {
						exit
					} {
						/drawline3 trap
					} ifelse } ifelse
				} {
					/s s c strcat def
				} ifelse
			} loop
			/center s false
			/cc cc 1 add def
		} { c ({) eq {
			% 置換無効、回転有効にして false を置く。
			/subst false def
			/rot true def
			false
		} { c (}) eq {
			% 置換有効、回転無効に戻して false を置く。
			/subst true def
			/rot false def
			false
		} { c (%) eq {	% %そのもの。
			c true
			/cc cc 1 add def
		} { c (>) eq {	% 上タブ位置出力
			/ttab false
		} { c (<) eq {	% 下タブ位置出力
			/btab false
		} { c ([) eq {	% 出力禁止
			/dis false
		} { c (]) eq {	% 出力再開
			/ena false
		} {
			/drawline1 trap
		} ifelse } ifelse } ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
	} {
		% 通常の文字。
		c true
		/cc cc 1 add def
	} ifelse
} bind def

% str drawline-subst
% substtableを引いて処理を行う。
%	rot・substが使用される。
/drawline-subst {
	/s exch def
	/r rot def
	substtable s known {
		% 置換テーブルに要素がみつかった。
		% 配列の場合とリテラルの場合があるが、aget・alengthで
		% 共通に処理する。
		/t substtable s get def
		/i 0 def
		{
			i t alength ge { exit } if
			/v t i aget def
			/i i 1 add def
			v type /stringtype eq {
				% 置換先文字列
				subst { /s v def } if
			} { v /rot eq {
				% 回転の指定
				/r true def
			} { v /hfont eq {
				% 横書きフォントの指定
				% 指定されたものが名前で、辞書から見つかれば
				% そのオブジェクトを使う。そうでなければ
				% フォントを探す。指定されたものがオブジェクトなら
				% そのオブジェクトをそのまま使う。
				/w t i aget def
				/i i 1 add def
				w type /nametype eq w type /stringtype eq or {
					w where {
						w get /hfont exch
					} {
						/hfont w findfont
					} ifelse
				} {
					/hfont w
				} ifelse
			} {
				/drawline4 trap
			} ifelse } ifelse } ifelse
		} loop
	} if
	% /rotは必要ならば1文字ごとに出る。
	r { /rot } if
	s
} bind def

% - <drawline-settab> -
/drawline-settab {
	settab {
		opt /Tab known not {
			opt /Tab 1 dict put
		} if
		opt /Tab get dup length currentpoint mtx transform exch pop put
	} if
} bind def

% /rot: drawline-rotfont、なければdrawline-hfont
% /center: drawline-centerfont、なければdrawline-hfont

% strlistarray heightstr <drawline-draw> -
/drawline-draw {
	1 dict begin
	/hstr exch def
	/strlist exch def
	/center false def
	/rot false def
	/cfont /drawline-centerfont drawline-hfont defaultload def
	/rfont /drawline-rotfont drawline-hfont defaultload def
	/rf rfont def
	/hf false def
	/adj2 null def
	/toptab false def
	/moveonly false def
	strlist {
		/x exch def
		1 { hf {
			% 直前が/hfontだった場合の処理。
			% フォントはすでにオブジェクトに展開されている。
			/rf x def
			/hf false def
			exit
		} if
		x type /stringtype eq {
			% 文字発見。モードに従って描画し、モードを元に戻す。
			adj2 null ne {
				0 adj2 rmoveto
			} if
			toptab {
				drawline-settab
				/toptab false def
			} if
			moveonly {
				gsave matrix currentmatrix nulldevice setmatrix
			} if
			rot {
				rf x false << /HeightString hstr >>
				ttfVerticalRotateShow
			} { center {
				cfont x ttfVerticalCenterShow
			} {
				x show
			} ifelse } ifelse
			moveonly {
				currentpoint grestore moveto
			} if
			/center false def
			/rot false def
			/rf rfont def
			/adj2 adj def
			exit
		} if
		x /center eq {
			/center true def
			exit
		} if
		x /rot eq {
			/rot true def
			exit
		} if
		x /hfont eq {
			% 次のループで/rfにフォントが取り込まれる。
			/hf true def
			exit
		} if
		x /btab eq {
			% タブ位置を出力する。
			drawline-settab
			exit
		} if
		x /ttab eq {
			/toptab true def
			exit
		} if
		x /ena eq {
			/moveonly false def
			exit
		} if
		x /dis eq {
			/moveonly true def
			exit
		} if
			/drawline2 trap
		} repeat
	} forall
	end
} bind def

currentdict end
/drawline-subr exch def

% str height [ optdict ] <drawline> -
% 	str:
%		%%: %そのもの
% 		%(): 続くnバイトを横書きする。全体で縦方向1文字送り扱い。
% 		%!: 次の%!まで文字置換の対象としない。それぞれ縦1文字送り。
% 		%@: 次の%@まで右90度回転して表示。
%			元々の文字の横幅が縦方向の送り幅になる。
%	optdict:
%		/Align ident
%			/Justify: 均等割り。長さが足りなければ文字間にスペースを入れる
%				長さが長い場合は縮小される。
%			/bottom: 下寄せ。
%		/Continue bool
%			/Alignが/Justifyの場合のみ意味がある。
%			trueの場合、最後の文字の後ろにも調整用のスペースが入る。
%		/Tab 辞書 (output)
%			タブ位置を示す。
%		/HeightString str
%			ttfVerticalRotateShowに渡すHeightString。デフォルトは(fg)
%		/CalcOnly
%			falseの場合は描画まで行う。trueの場合は描画はしない。
%		/StringHeight (出力)
%			heightやAlignを無視して描画した文字列高さ。
%		/DrawingHeight (出力)
%			実際の描画高さ。/CalcOnlyがtrueの場合は設定されない。
/drawline {
	//drawline-subr begin
	1 dict begin 1 {

	% パラメーター取得
	dup type /dicttype eq { /opt exch def } { /opt 0 dict def } ifelse
	/height exch def
	/str exch def
	str length 0 eq { exit } if

	/hstr opt /HeightString (fg) defaultget def
	/align opt /Align /Top defaultget def
	/cont opt /Continue false defaultget def
	/adj null def
	/calconly opt /CalcOnly false defaultget def
	/mtx matrix def

	% 文字列を分解して配列に、置換する文字列は置換。
	/cc 0 def	% charactor count
	/subst true def
	/rot false def
	/strlist [
		{
			str length 0 eq { exit } if
			drawline-strlist {
				drawline-subst
			} if
		} loop
	] def

	% 文字列高さを求める
	gsave
		matrix currentmatrix
		nulldevice
		setmatrix
		/settab calconly def
		currentpoint /y0 exch def pop
		strlist hstr drawline-draw
		currentpoint y0 sub /h exch def pop
	grestore
	opt /StringHeight h abs put
	calconly not {
		/settab true def
		height h abs lt {
			% 縮小が必要な場合
			matrix currentmatrix
			/mtx 1 height h abs div matrix scale def
			mtx concat
			strlist hstr drawline-draw
			setmatrix
			opt /DrawingHeight height put
		} { align /Top eq {
			strlist hstr drawline-draw
			opt /DrawingHeight h abs put
		} { align /Bottom eq {
			0 height h 0 lt { neg } if h sub rmoveto
			strlist hstr drawline-draw
			opt /DrawingHeight h abs put
		} { align /Justify eq {
			/adj height h abs sub cc cont not { 1 sub } if div
			h 0 lt { neg } if def
			strlist hstr drawline-draw
			opt /DrawingHeight height put
			cont { 0 adj rmoveto } if
		} {
			/drawline5 trap
		} ifelse } ifelse } ifelse } ifelse
	} if

	} repeat end end
} bind def

/charbytesproc { charbytesEUC } def

/crossmark {
	gsave
	0 setlinewidth
	18 18 scale
	-0.5 0 rmoveto 1 0 rlineto
	-0.5 -0.5 rmoveto 0 1 rlineto
	stroke
	grestore
} bind def

{
	1.5 1.5 scale
	/DFKaiSho-Md /EUC-H ttfComposeVerticalFont 18 scalefont setfont
	/drawline-hfont /DFPKaiSho-Md-EUC-H findfont 18 scalefont def
	/drawline-centerfont /Times-Roman findfont 16 scalefont def
	/drawline-hyphen-font /Courier findfont 18 scalefont def
	100 500 moveto currentpoint
	crossmark

	/tab 1 dict def
	/opt << /Align /Justify /Continue true /Tab tab >> def
	/h 450 def
	(オ%>ーシャンビュー%<が素敵なレジデンスAkamoz%(VIII%)123-10%>号%<室) h opt drawline
	crossmark
	0 opt /DrawingHeight get rmoveto crossmark
	100 tab 0 get moveto crossmark
	100 tab 1 get moveto crossmark
	110 500 moveto crossmark

	moveto 10 0 rmoveto
	(オ%[ーシャンビューが素敵なレジデンスAkamoz%(VIII%)123-10号%]室) h opt drawline

	showpage
	quit
} pop
