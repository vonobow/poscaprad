%!PS-Adobe 3.0
% Copyright (c) 2016 akamoz.jp
% All rights reserved.
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice,
% this list of conditions and the following disclaimer.
%
% 2. Redistributions in binary form must reproduce the above copyright notice,
% this list of conditions and the following disclaimer in the documentation
% and/or other materials provided with the distribution.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

/print-address-version (0.1) def

/NONATIVEFONTMAP true def
[ {Catalog} << /PageLayout /SinglePage >> /PUT pdfmark

(drawline.ps) runlibfile

/mm [ 72 25.4 div /mul cvx ] cvx bind def

% name value <setdef> -
/setdef {
	1 index where {
		pop pop pop
	} {
		def
	} ifelse
} bind def

/NoInitScript false setdef
/NoDefaultScript false setdef

NoInitScript not {
	(print-address-init.ps) findlibfile {
		exch (runnig ) print print ( ... ) print flush
		cvx exec
		(done.\n) print flush
	} {
		pop
	} ifelse
} if

NoDefaultScript not {
	(HOME) getenv {
		(/.ghostscript/print-address-default.ps) strcat
		{ (r) file } stopped {
			$error /errorname get /undefinedfilename ne {
				stop
			} if
			$error /newerror false put
		} {
			cvx exec
		} ifelse
	} if
} if

/encoding /EUC setdef
/draw-zip-frame false setdef
/new-year-card true setdef
/nyc-offset { new-year-card { 10 mm } { 0 } ifelse } def
/address-book-filename (address.ps) setdef
/address-list-filename (address.lst) setdef
/return-address-filename (retadr.ps) setdef

/paper-width 100 mm setdef
/paper-height 148 mm setdef
/margin-left 5 mm setdef
/margin-right [ 15 mm 10 mm 5 mm 3 mm ] setdef
/margin-top 25 mm setdef
/margin-bottom { 18 mm nyc-offset add } setdef

/adr-fontname /MS-Mincho setdef
/adr-fontsize 7 mm setdef
/adr-linepitch 1.5 setdef
/adr-indent 10 mm setdef
/adr-top 0 mm setdef
/adr-bottom 7 mm setdef
/adr-top-ypos { paper-height margin-top sub adr-top sub } def
/adr-indent-ypos { adr-top-ypos adr-indent sub } def
/adr-bottom-ypos { margin-bottom adr-bottom add } def
/adr-height { adr-top-ypos adr-bottom-ypos sub abs } def
/adr-indent-height { adr-height adr-indent sub } def

/hyphen-fontname /Courier setdef

/name-top 25 mm setdef
/name-bottom 2 mm setdef
/name-hoffset 0 mm setdef
/name-fontsize 10 mm setdef
/name-fontname /MS-Gothic setdef
/name-spacing 0.5 setdef
/name-linepitch 1.2 setdef
/name-top-ypos { paper-height margin-top sub name-top sub } def
/name-bottom-ypos { margin-bottom name-bottom add } def
/name-height { name-top-ypos name-bottom-ypos sub abs } def

/retadr-margin-top 65 mm setdef
/retadr-bottom 3 mm setdef
/retadr-top 0 mm setdef
/retadr-fontname /MS-Mincho setdef
/retadr-fontsize 4 mm setdef
/retadr-linepitch 1.3 setdef
/retadr-indent 6 mm def
/retadr-linegap 2 mm setdef
/retadr-top-ypos { paper-height retadr-margin-top sub retadr-top sub } def
/retadr-indent-ypos { retadr-top-ypos retadr-indent sub } def
/retadr-bottom-ypos { margin-bottom retadr-bottom add } def

/retname-top 15 mm setdef
/retname-bottom 0 mm setdef
/retname-fontname /MS-Gothic setdef
/retname-fontsize 4.5 mm setdef
/retname-linepitch 1.3 setdef
/retname-top-ypos { paper-height retadr-margin-top sub retname-top sub } def
/retname-bottom-ypos { margin-bottom retname-bottom add } def
/retname-spacing { name-spacing } setdef

/current-linewidth { current-fontsize current-linepitch mul } bind def
/current-lineoff { current-linewidth 0.5 mul } bind def

/verticalhome { paper-width paper-height moveto } bind def

/DebugDump true def
/dump {
	/DebugDump false defaultload {
		(----- ) print print ( -----\n) print
		pstack
		(--------------------\n) print
	} {
		pop
	} ifelse
} bind def

/rrect {
	2 dict begin
	/dy exch def
	/dx exch def
	currentpoint
	dx 0 rlineto
	0 dy rlineto
	dx neg 0 rlineto
	closepath
	moveto
	end
} bind def

/zipw 5.7 mm def
/ziph 8 mm def
/retzipw 4 mm def
/retziph 6.5 mm def
/zip-box {
	1 dict begin
	/w exch def
	currentpoint
	zipw ziph rrect
	w neg dup rmoveto
	w 2 mul zipw add
	w 2 mul ziph add rrect
	eofill
	moveto
	end
} bind def

/ziphome {
	verticalhome
	-8 mm -12 mm rmoveto
	-47.7 mm -8 mm rmoveto
} bind def

/retziphome {
	5.5 mm new-year-card { 19 mm } { 4 mm } ifelse moveto
} bind def

% zipw ziph <zipoffset> -
/zipoffset {
	6 dict begin
	/h exch def
	/w exch def
	gsave
	[ (0) (1) (2) (3) (4) (5) (6) (7) (8) (9) ] {
		0 0 moveto false charpath
	} forall
	flattenpath pathbbox
	grestore
	/y1 exch def /x1 exch def
	/y0 exch def /x0 exch def
	w x0 x1 add sub 0.5 mul
	h y0 y1 add sub 0.5 mul rmoveto
	end
} bind def

/zipframe {
	1 dict begin
	gsave
	ziphome
	1 0 0 setrgbcolor
	0.5 mm zip-box
	7 mm 0 rmoveto 0.5 mm zip-box
	7 mm 0 rmoveto 0.5 mm zip-box
	7.6 mm 0 rmoveto 0.3 mm zip-box
	6.8 mm 0 rmoveto 0.3 mm zip-box
	6.8 mm 0 rmoveto 0.3 mm zip-box
	6.8 mm 0 rmoveto 0.3 mm zip-box

	retziphome
	retzipw retziph rrect 4 mm 0 rmoveto
	retzipw retziph rrect 4 mm 0 rmoveto
	retzipw retziph rrect 5 mm 0 rmoveto
	retzipw retziph rrect 4 mm 0 rmoveto
	retzipw retziph rrect 4 mm 0 rmoveto
	retzipw retziph rrect 4 mm 0 rmoveto
	retzipw retziph rrect 4 mm 0 rmoveto
	0.3 mm setlinewidth [ 1 mm 0.5 mm ] 0 setdash
	stroke

	new-year-card {
		/w 0.3 mm def
		/w2 w 2 mul def
		w 88 mm w add moveto 30 mm w2 sub 60 mm w2 sub rrect
		w w moveto 100 mm w2 sub 25 mm w2 sub rrect stroke
	} if

	grestore
	end
} bind def

/drawline-fontcache 1 dict def

% vfontname hfontname size pitch <drawline-setfont> -
/drawline-setfont {
	/current-linepitch exch def
	/current-fontsize exch def
	findfont current-fontsize scalefont /drawline-hfont exch def
	1 dict begin
	strdup /vfn exch def
	/vcfn vfn (-) strcat CMapName strdup strcat def
	drawline-fontcache vcfn known {
		drawline-fontcache vcfn get
	} {
		vfn CMapName ttfComposeVerticalFont
		drawline-fontcache vcfn 2 index put
	} ifelse
	current-fontsize scalefont setfont
	end
	hyphen-fontname findfont current-fontsize scalefont
	/drawline-hyphen-font exch def
} bind def

% str top bottom dict(opt) <draw-address> -
/draw-address {
	3 dict begin
	dup type /dicttype ne { << >> } if
	/opt exch def
	/b exch def
	/t exch def
	gsave
	current-lineoff t rmoveto
	t b sub abs opt drawline
	grestore
	current-linewidth 0 rmoveto
	end
} bind def

% str <draw-retzip> -
/draw-retzip {
	1 dict begin
	/s exch def
	s length 7 lt { /retzip trap } if
	s length 8 gt { /retzip trap } if
	zip-fontname findfont 4 mm scalefont setfont
	retziphome retzipw retziph zipoffset
	s 0 3 getinterval [ 4 mm 4 mm 5 mm ] xshow
	s dup length 4 sub 4 getinterval [ 4 mm 4 mm 4 mm 4 mm ] xshow
	end
} bind def

% - <retadr-setfont> -
/retadr-setfont {
	retadr-fontname retadr-hfontname
	retadr-fontsize retadr-linepitch drawline-setfont
} bind def

% - <retname-setfont> -
/retname-setfont {
	retname-fontname retname-hfontname
	retname-fontsize retname-linepitch drawline-setfont
} bind def

% str <draw-retadr-first> -
% 差出人住所最初の行
/draw-retadr-first {
	retadr-top-ypos retadr-bottom-ypos draw-address
} bind def

% str <draw-retadr-next> -
% 差出人住所2行目以降最終行以外
/draw-retadr-next {
	retadr-indent-ypos retadr-bottom-ypos draw-address
} bind def

% str <draw-retadr-last> -
% 差出人住所最終行
/draw-retadr-last {
	retadr-indent-ypos retadr-bottom-ypos << /Align /Bottom >> draw-address
} bind def

% str <draw-retname> -
% 差出人氏名
/draw-retname {
	retname-top-ypos retname-bottom-ypos << /Align /Justify >> draw-address
} bind def

% str str <draw-retlist-setup> -
% 差出人連名処理の設定。姓と名を別々に指定する。
% draw-retlist-infoという辞書に必要な情報が出力される。
/draw-retlist-setup {
	10 dict begin
	/gn exch def
	/fn exch def
	/h retname-top-ypos retname-bottom-ypos sub abs def
	/opt << /CalcOnly true >> def
	gsave
	fn 0 opt drawline opt /StringHeight get /fh exch def
	gn 0 opt drawline opt /StringHeight get /gh exch def
	/spc current-fontsize retname-spacing mul def
	/totalheight fh spc add gh add def
	totalheight h lt {
		/fh h spc sub fh mul fh gh add div def
		/gh h fh sub spc sub def
	} {
		h totalheight div
		dup fh mul /fh exch def
		gh mul /gh exch def
	} ifelse
	/y1 retname-top-ypos fh sub def
	/y2 retname-bottom-ypos gh add def
	grestore
	currentdict
	end
	/draw-retlist-info exch def
} bind def

% str str <draw-retlist> -
% 差出人連名描画。姓と名を別々に指定する。
% 姓を書きたくない人は姓を空文字列にする。
% draw-retlist-info辞書が使用される。
/draw-retlist {
	draw-retlist-info begin
	gsave
	y2 retname-bottom-ypos << /Align /Justify >> draw-address
	grestore
	retname-top-ypos y1 << /Align /Justify /Continue true >> draw-address
	end
} bind def

% read address book file.
3 dict begin
count /StackCount exch def

/----- {
	>>
	dup /ID knownget {
		exch def
	} {
		pop
	} ifelse
	<<
} def

200 dict begin
<< address-book-filename run
count StackCount sub { pop } repeat
currentdict end end
/addressbook exch def

% addressbook { exch dup length string cvs print (: ) print == } forall

addressbook /default knownget not { 1 dict } if begin
encoding /EUC eq {
	(euc-settings.ps) runlibfile
} { encoding /UTF8 eq {
	(utf8-settings.ps) runlibfile
} {
	/encoding trap
} ifelse }ifelse
/substtable drawline-substtable def

<< /PageSize [ paper-width paper-height ] >> setpagedevice

/infile address-list-filename (r) file def
/linebuf 256 string def
/pagecnt 1 def

{
	infile linebuf readline not { pop exit } if
	1 {
		dup length 2 lt { pop exit } if
		dup 0 get 16#2f ne { pop exit } if
		token not { exit } if
		exch pop dup type /nametype ne { pop exit } if
		addressbook exch get

		begin
		20 dict begin

		(page: ) print pagecnt 32 string cvs print ( ... ) print flush
		/draw-zip-frame false defaultload { zipframe } if
		ZIP dup length dup 7 lt { /zip trap } if 8 gt { /zip trap } if
		zip-fontname findfont 5.4 mm scalefont setfont
		ziphome zipw ziph zipoffset
		dup 0 3 getinterval [ 7 mm 7 mm 7.6 mm ] xshow
		dup length 4 sub 4 getinterval [ 6.8 mm dup dup dup ] xshow

		adr-fontname adr-hfontname adr-fontsize adr-linepitch drawline-setfont
		paper-width 0 moveto
		margin-right alength ADRS alength lt {
			margin-right dup alength 1 sub aget
		} {
			margin-right ADRS alength 1 sub aget
		} ifelse
		neg 0 rmoveto

		gsave
		current-lineoff neg adr-top-ypos rmoveto
		ADRS 0 aget adr-height drawline
		grestore
		current-linewidth neg 0 rmoveto
		ADRS alength 1 gt {
			ADRS 1 ADRS length 2 sub getinterval {
				gsave
				current-lineoff neg adr-indent-ypos rmoveto
				adr-indent-height drawline
				grestore
				current-linewidth neg 0 rmoveto
			} forall
			ADRS dup length 1 sub get
			current-lineoff neg adr-indent-ypos rmoveto
			adr-indent-height << /Align /Bottom >> drawline
		} if

		% ashowによる追加のスペースは、name-spacingの直後には付かない。
		/family-name C def

		% 連名処理: 辞書中に/FL（ファミリーリスト）がある場合
		% /FLは配列で、要素は文字列かID。
		% 文字列だった場合はそれをそのまま名前として表示する。
		% IDだった場合はIDを検索して/Dを名前として表示する。
		% /FLがなければ元辞書中の/Dがそのまま名前となる。
		% 長さの計算は一番長い名前の人に合わせる。
		% 一文字の人は上揃えされるので、
		% 中揃えしたければスペースを前後に入れて3文字に、
		% 下揃えしたければスペースを前に入れて2文字にする。
		% 同時に敬称も読み出しておく。
		/FL where {
			pop [ FL {
				3 dict begin
				dup type /nametype eq {
					% id
					addressbook exch get
					dup /D get /gn exch def
					/title-aft title-aft-default defaultget /ta exch def
				} {
					% may be a string
					/gn exch def
					/ta title-aft-default def
				} ifelse
				currentdict end
			} forall ]
		} {
			[ <<
				/gn D
				/ta /title-aft title-aft-default defaultload
			>> ]
		} ifelse
		/namelist exch def
		% namelistは
		% << /gn (名前) /ta (敬称) >>
		% の配列。

		% 文字列長さを計算し、一番長いものを探す。
		name-fontname name-hfontname name-fontsize
		name-linepitch drawline-setfont
		/opt << /CalcOnly true >> def
		null 0 namelist {
			begin
			gn name-height opt drawline	% 高さは仮
			/gh opt /StringHeight get def
			ta name-height opt drawline	% 同
			/th opt /StringHeight get def
			gh th add
			2 copy lt { currentdict exch 4 2 roll pop pop } { pop } ifelse
			end
		} forall
		/gth exch def
		/tallest exch def

		% 姓の長さを求める
		family-name name-height opt drawline	% 高さは仮
		/fh opt /StringHeight get def

		/sp name-spacing name-fontsize mul def	% 姓名間空白長
		/namelen fh sp add gth add def	% 文字列描画長

		% 姓の高さfh、空白sp、名＋敬称高さgthの再計算
		namelen name-height lt {
			% スキマができる。name-heightからspとthを引いた残りを分配
			tallest begin
			name-height sp sub th sub fh mul fh gh add div
			end
			/fh exch def
		} {
			% スキマができない。name-heightを比例配分
			name-height namelen div dup fh mul /fh exch def
			sp mul /sp exch def
		} ifelse
		/gth name-height fh sub sp sub def

		% 2行以上ある場合は名前全体の中央が紙面中央に来るようにする。
		paper-width 0.5 mul 0 moveto
		namelist length 1 sub current-lineoff mul name-hoffset sub
		name-top-ypos rmoveto

		% 姓を書く
		family-name fh << /Align /Justify /Continue true >> drawline
		0 sp neg rmoveto

		% 名を書く
		namelist {
			begin
			gsave
			gh th add gth lt {
				% 収まる
				gn gth th sub << /Align /Justify /Continue true >> drawline
				ta th drawline
			} {
				% 収まらない
				gn ta strcat gth drawline
			} ifelse
			grestore
			end
			current-linewidth neg 0 rmoveto
		} forall

		/stackcount count def
		/dictstackcount countdictstack def
		1 dict begin gsave
		return-address-filename run
		grestore end
		stackcount count ne { /stackcount trap } if
		dictstackcount countdictstack ne { /dictstack trap } if

		showpage
		(done.\n) print flush
		/pagecnt pagecnt 1 add store
		end end
	} repeat
} loop
end
quit
