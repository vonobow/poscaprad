%!PS-Adobe 3.0
% $Id: akamoz-ttfproc.ps 31 2016-02-28 06:07:08Z you $
%
% Copyright (c) 2016 akamoz.jp
% All rights reserved.
% Redistribution and use in source and binary forms, with or without
% modification, are permitted provided that the following conditions are met:
%
% 1. Redistributions of source code must retain the above copyright notice,
% this list of conditions and the following disclaimer.
%
% 2. Redistributions in binary form must reproduce the above copyright notice,
% this list of conditions and the following disclaimer in the documentation
% and/or other materials provided with the distribution.
%
% THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
% AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
% IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
% ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
% LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
% CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
% SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
% INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
% CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
% ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
% POSSIBILITY OF SUCH DAMAGE.

currentglobal
true setglobal

1 dict begin % localdict

/localdebug { pop } def

/ProcSetVersion (0.1) def	% re-define into procset dict later.

1 dict begin % subr

/ttfprocDebug { pop } def
/ttfprocVerbose { pop } def
/ttfprocMoreVerbose { pop } def
/aprintDebug { ttfprocDebug { aprint flush } ttfprocDebug } def
/aprintVerbose { ttfprocVerbose { aprint flush } ttfprocVerbose } def
/aprintMoreVerbose {
	ttfprocMoreVerbose { aprint flush } ttfprocMoreVerbose
} def

/MaxStringBuffer 256 def

% proc <moreverbose> -
/moreverbose {
	1 dict begin
	/CurrentVerbose /ttfprocVerbose load def
	/ttfprocVerbose /ttfprocMoreVerbose load store
	protected-exec
	/ttfprocVerbose /CurrentVerbose load store
	end
} bind def

/n2 { b2 str2num } bind def
/i2 { n2 dup 16#8000 ge { 16#10000 sub } if } bind def
/n4 { b4 str2num } bind def
/off2 { n2 Offset add } bind def
/off4 { n4 Offset add } bind def
/setpos { FontFile exch setfileposition } bind def
/fwd { FontFile fileposition add setpos } bind def

% file num <bindfilebuffer> obj
/bindfilebuffer {
	[
		3 1 roll string
		{ readstring not { /readstring trap } if } { } forall
	] cvx
} bind def

% str <printversion> -
/printversion {
	str2num [
		1 index -16 bitshift (.)
		<< /R 16 /W 4 /A (0) >> 4 index 16#ffff and
	] aprint
	pop
} bind def

/ckver {
	/Version b4 def
	{ ( ver=) print Version printversion } ttfprocDebug
	Version gt { /ttfver trap } if
} bind def

/ckdup {
	currentdict 1 index known { /ttf-duptag trap } if
} bind def

% obj key proc <retr> dict
% retrieve standard table
/retr {
	1 dict begin
	/p exch def
	/k exch def
	/o exch def
	o k get dup type /dicttype ne {
		1 dict begin
		o k currentdict put
		/Offset exch def
		true
	} { dup /Retrieved known not {
		begin true
	} {
		false
	} ifelse } ifelse
	{
		/Key k def
		[ Key (: off=) Offset ] aprintDebug
		Offset setpos p
		/Retrieved true def
		(\n) aprintDebug
		currentdict end
	} {
		[ k (: (cached)\n) ] aprintDebug
	} ifelse
	end
} bind def

% name num <idxtbl> -
/idxtbl {
	array exch 1 index def
	{
		n2 [ ( ) 2 index ] aprintVerbose put
	} for-elem
} bind def

% name num <offtbl> -
/offtbl {
	array exch 1 index def
	{
		off2 [ ( ) 2 index ] aprintVerbose put
	} for-elem
} bind def

% num <tagoff> -
/tagoff {
	{
		b4 cvn [ (\n  ) 2 index ] aprintVerbose ckdup
		off2 [ (: off=) 2 index ] aprintVerbose def
	} repeat
} bind def

% strarray pos size <getstrarray> substr true
% strarray pos size <getstrarray> false
/getstrarray {
	4 dict begin
	/sz exch def
	sz mul /pos exch def
	/got false def
	{
		pos 1 index length lt {
			pos sz getinterval
			/got true def
			exit
		} if
		pos exch length sub /pos exch def
	} exec-forall
	got
	end
} bind def

% dict copyfont dict'
/copyfont {
	dup length dict copy
	dup /FID undef
	dup /UIDBase undef
	dup /UniqueID undef
	begin
	currentdict /XUID known {
		XUID 0 get 1000000 ge {
			/XUID [ XUID aload pop ] def
			XUID 0 XUID 0 get 1 add put
		} {
			/XUID [ 1000000 XUID aload pop ] def
		} ifelse
	} {
		/XUID [ 1000000 1 ] def
	} ifelse
	currentdict end
} bind def

% cidmap copyCIDMap cidmap'
% currentdict is used as font.
/copyCIDMap {
	dup type /arraytype eq {
		[ exch { dup length string copy } forall ]
	} {
		dup length string copy
	} ifelse
} bind def

currentdict end % subr
/subr exch def

% resourcename filenamestr <reprsc> resourcename
/preprsc {
	systemdict /findlibfile known {	% running on ghostscript
		findlibfile {
			{ (running ) print 1 index print (\n) print flush } localdebug
			cvx exec pop
		} { pop } ifelse
	} { pop } ifelse
} bind def

/proclist [
	/util.ps.akamoz.jp (akamoz-util.ps) preprsc
	/charproc.ps.akamoz.jp (akamoz-charproc.ps) preprsc
	/cmapproc.ps.akamoz.jp (akamoz-cmapproc.ps) preprsc
	subr
] def

% proc <prepproc> proc'
%	bind proc with proclist (defined above) dictionary.
/prepproc { [
	proclist {
		dup type /dicttype ne { /ProcSet /findresource cvx } if
		/begin cvx
	} forall
	counttomark 1 add index aload pop
	proclist length { /end cvx } repeat
] cvx exch pop } bind def

1 dict begin % ttfproc.ps.akamoz.jp

/ProcSetVersion ProcSetVersion def
/ProcSetName (ttfproc.ps.akamoz.jp) def

{
	ProcSetName print ( version ) print
	ProcSetVersion print (\n) print
} localdebug

% file <ttfReadTTCHeader> otfdict
/ttfReadTTCHeader {
	1 dict begin
	/FontFile exch def
	/b2 FontFile 2 bindfilebuffer def
	/b4 FontFile 4 bindfilebuffer def
	b4 (ttcf) eq {
		(TrueType Collection: ) aprintDebug
		<00010000> ckver
		/NumFonts n4 def
		[ ( numfonts=) NumFonts ] aprintDebug
		[ (\n  offsets:) ] aprintVerbose
		/OffsetTable [ NumFonts {
			n4 [ ( ) 2 index ] aprintVerbose
		} repeat ] def
	} {
		(TrueType single font (maybe)) aprintDebug
		/Version <00010000> def
		/NumFonts 1 def
		/OffsetTable [ 0 ] def
	} ifelse
	(\n) aprintDebug
	currentdict end
} prepproc bind def

% otfdict subfontnum <ttfReadTrueTypeHeader> ttfdict
/ttfReadTrueTypeHeader {
	exch begin
	1 dict begin
	/sf exch def
	(TrueType Offset Table ) aprintDebug
	OffsetTable sf {
		% copy utility procedures
		/FontFile FontFile def
		/b2 dup load def
		/b4 dup load def
		<00010000> ckver
		/NumTables n2 def
		[ ( cnt=) NumTables ] aprintDebug
		6 fwd
		/OffsetTable NumTables dict def
		OffsetTable begin NumTables {
			b4 cvn [ (\n  ) 2 index ] aprintVerbose ckdup
			<<
				/Checksum n4
				[ (: sum=) << /R 16 /W 8 /A (0) >> 3 index ] aprintVerbose
				/Offset n4 [ ( off=) 2 index ] aprintVerbose
				/Length n4 [ ( len=) 2 index ] aprintVerbose
			>> def
		} repeat end
	} retr
	end end
} prepproc bind def

% otfdict | ttfdict <ttfCloseFontFile> -
/ttfCloseFontFile {
	begin
	FontFile type /filetype eq {
		(ttfCloseFontFile: closing file\n) aprintDebug
		FontFile closefile
		/FontFile null def
	} if
	end
} prepproc bind def

% ttfdict <ttfReadNameTable> ttfdict namedict
/ttfReadNameTable {
	dup begin
	OffsetTable /name {
		/Format n2 def
		[ ( format=) Format ] aprintDebug
		Format 0 eq {
			/Count n2 def
			[ ( cnt=) Count ] aprintDebug
			/StringOffset off2 def
			[ ( stroff=) StringOffset ] aprintDebug
			/NameRecord Count array def
			NameRecord {
				[ (\n  ) 2 index (:) ] aprintVerbose
				<<
				/PlatformID n2
				[ ( platform=) 2 index ] aprintVerbose
				/EncodingID n2
				[ ( enc=) 2 index ] aprintVerbose
				/LanguageID n2
				[ ( lang=) 2 index ] aprintVerbose
				/NameID n2
				[ ( nameid=) 2 index ] aprintVerbose
				/Length n2
				[ ( len=) 2 index ] aprintVerbose
				/String n2 StringOffset add
				[ ( off=) 2 index ] aprintVerbose
				>> put
			} for-elem
		} {
			/ttfnamefmt0 trap
		} ifelse
	} retr
	end
} prepproc bind def

subr begin

% decode table for platform ID 3
/ttfNameDecodePF3 <<
	1 { decodeUCS2BE }
%	10 { decodeUTF32BE }	is actually UTF-16, isn't it??
>> def

/ttfNameDecode <<
	3 ttfNameDecodePF3
>> def

% dict <ttfGetDecodeTable> ( decodeproc true | false )
%	using PlatformID and EncodingID in dict.
/ttfGetDecodeTable {
	begin
	//ttfNameDecode PlatformID knownget dup { pop EncodingID knownget } if
	end
} bind def

end % subr

% ttfdict <ttfGetFontName> ttfdict str
/ttfGetFontName {
	dup begin
	1 dict begin
	/got false def

	ttfReadNameTable	% ttfdict namedict
	/NameRecord get {
		dup /NameID get 6 eq {
			dup ttfGetDecodeTable { /got true def exit } if
		} if
		pop
	} forall
	got not { /ttfrdfn0 trap } if
	/decproc exch def

	begin
	String dup type /integertype eq {
		[ (  fontname: off=) 2 index ] aprintDebug
		setpos
		FontFile Length string readstring not { /ttfdfn1 trap } if
		{ decproc encodeUTF8 } cvx convertstring
		dup /String exch def
		[ ( string=) String (\n) ] aprintDebug
	} if
	end end end
} prepproc bind def

% font <ttfFindFontTable> (ttfdict true) | false
/ttfFindFontTable {
	1 dict begin
	dup /CIDFontName get /FontNickName exch def
	/FontName get /FontRealName exch def
	[ (ttfFindFontTable: FontName=) FontRealName ] aprintDebug
	[ ( CIDFontName=) FontNickName (\n) ] aprintDebug
	/got false def
	/CIDFont /Category findresource begin
	FontNickName MaxStringBuffer string ResourceFileName
	end
	[ (  filename=) 2 index (\n) ] aprintDebug
	(r) file ttfReadTTCHeader /otf exch def
	otf /NumFonts get {	% otf subfontid
		otf exch ttfReadTrueTypeHeader	% ttfdict
		ttfGetFontName	% ttfdict str
		dup FontRealName eq { pop /got true def exit } if	% ttfdict str
		FontNickName eq { /got true def exit } if	% ttfdict
		pop
	} repeat-count	% ttfdict |
	got { true } { otf ttfCloseFontFile false } ifelse
	end
} prepproc bind def

% ttfdict id <ttfCheckSupport> ttfdict bool
/ttfCheckSupport {
	1 index /OffsetTable get exch known
} bind def

% ttfdict <ttfRead-head> ttfdict
% 	head table specific informations are stored in head dict.
%	global informations are stored in ttfdict directly.
/ttfReadHeadTable {
	dup begin
	OffsetTable /head {
		<00010000> ckver
		dup begin
			14 fwd /UnitsPerEm n2 def
			[ ( funit=) UnitsPerEm ] aprintDebug
			30 fwd /IndexToLocFormat n2 def
		end
	} retr pop
	end
} prepproc bind def

% ttfdict <ttfReadMaxpTable> ttfdict
% 	maxp table specific informations are stored in maxp dict.
%	global informations are stored in ttfdict directly.
/ttfReadMaxpTable {
	dup begin
	OffsetTable /maxp {
		<00005000> ckver
		dup begin
			/NumGlyphs n2 def
			[ ( numglyphs=) NumGlyphs ] aprintDebug
		end
	} retr pop
	end
} prepproc bind def

% ttfdict <ttfReadOS2Table> ttfdict
/ttfReadOS2Table {
	ttfReadHeadTable
	dup begin
	OffsetTable (OS/2) cvn {
		68 fwd
		dup begin
			/TypoAscender n2 UnitsPerEm div def
			[ ( typoasnd=) TypoAscender ] aprintDebug
		end
	} retr pop
	end
} prepproc bind def

{ %========== these are unused ==========

% ttf <ttfReadCmapTable> ttf cmapdict
/ttfReadCmapTable {
	dup begin
	OffsetTable /cmap {
		/Version n2 def
		[ ( ver=) Version ] aprintDebug
		/NumTables n2 def
		[ ( cnt=) NumTables ] aprintDebug
		/Encoding NumTables array def
		Encoding {
			<<
			/PlatformID n2 [ (\n  pf=) 2 index ] aprintDebug
			/EncodingID n2 [ ( enc=) 2 index ] aprintDebug
			/Offset off4 [ ( off=) 2 index ] aprintDebug
			>> put
		} for-elem
	} retr
	end
} prepproc bind def

% ttf pf enc <ttfCheckCmapTable> ttf ( cmaparray idx true ) | false
/ttfCheckCmapTable {
	1 dict begin
	/enc exch def
	/pf exch def
	/got false def
	ttfReadCmapTable /Encoding get {
		2 copy get begin
		PlatformID pf eq EncodingID enc eq and
		end
		{ /got true def exit } if
		pop pop
	} for-elem
	got
	end
} prepproc bind def

subr begin

% ttf <ttfReadCmapSubtableFormat12> ttf
%	 use currentdict as cmapdict.
/ttfReadCmapSubtableFormat12 {
	10 fwd
	/NumGroups n4 def
	[ ( cnt=) NumGroups ] aprintDebug
	1 dict begin
	NumGroups {
		n4 [ (\n  0x) << /A (0) /W 5 /R 16 >> 3 index ] aprintVerbose
		n4 [ ( ... 0x) << /A (0) /W 5 /R 16 >> 3 index ] aprintVerbose
		n4 [ ( -> ) 2 index ] aprintVerbose
		2 index 1 3 index {
			[ (\n    0x) << /A (0) /W 5 /R 16 >> 3 index ] aprintMoreVerbose
			1 index [ ( -> ) 2 index ] aprintMoreVerbose
			def
			1 add
		} for
		pop pop pop
	} repeat
	currentdict end /CharToGlyphMap exch def
} bind def

end

% ttf cmaparray idx <ttfReadCmapSubtable> ttf cmapdict
/ttfReadCmapSubtable {
	2 index begin
	(cmap subtable ) aprintDebug
	{
		/Format n2 def
		[ ( fmt=) Format ] aprintDebug
		1 {
			Format 12 eq {
				ttfReadCmapSubtableFormat12
				exit
			} if
			/ttf-cmap-format trap
		} repeat
	} retr
	end
} prepproc bind def

} pop %========== end of unused portion ==========

% ttfdict <ttfReadHheaTable> ttfdict hheadict
/ttfReadHheaTable {
	dup begin
	OffsetTable /hhea {
		<00010000> ckver
		28 fwd
		/MetricDataFormat n2 def
		[ ( format=) MetricDataFormat ] aprintDebug
		/NumberOfMetrics n2 def
		[ ( numhmtx=) NumberOfMetrics ] aprintDebug
	} retr
	end
} prepproc bind def

subr begin

% ttfdict ( hheadict | vheadict ) id <ttfReadMetricsTable> ttfdict mtxdict
%	metrics values are normalized.
/ttfReadMetricsTable {
	2 index begin
	1 dict begin
	/id exch def
	/xhea exch def
	xhea /MetricDataFormat get 0 ne { /mtx-format trap } if
	ttfReadHeadTable
	ttfReadMaxpTable
	OffsetTable id {
		/AdvanceDistance xhea /NumberOfMetrics get array def
		/LeftSideBearing NumGlyphs array def
		[ (\n  values:) ] aprintMoreVerbose
		AdvanceDistance {
			n2 UnitsPerEm div
			LeftSideBearing 2 index i2 UnitsPerEm div put
			[ ( ) 2 index ] aprintMoreVerbose put
		} for-elem
		AdvanceDistance length 1 NumGlyphs 1 sub {
			LeftSideBearing exch i2 UnitsPerEm div put
		} for
	} retr
	end end
} bind def

end % subr

% ttfdict <ttfReadHmtxTable> ttfdict hmtxdict
/ttfReadHmtxTable {
	ttfReadHheaTable
	/hmtx ttfReadMetricsTable
} bind def

% ttfdict <ttfReadVheaTable> ttfdict vheaddict
/ttfReadVheaTable {
	dup begin
	OffsetTable /vhea {
		<00010000> ckver
		28 fwd
		/MetricDataFormat n2 def
		[ ( format=) MetricDataFormat ] aprintDebug
		/NumberOfMetrics n2 def
		[ ( numvmtx=) NumberOfMetrics ] aprintDebug
	} retr
	end
} prepproc bind def

% ttfdict <ttfReadVmtxTable> ttfdict vmtxdict
/ttfReadVmtxTable {
	ttfReadVheaTable
	/vmtx ttfReadMetricsTable
} bind def

% ttfdict comdict id <ttfReadScriptList> ttfdict scrldict
/ttfReadScriptList {
	1 index begin
	/ScriptList {
		/ScriptCount n2 def
		[ ( cnt=) ScriptCount ] aprintDebug
		ScriptCount tagoff
	} retr
	end
} prepproc bind def

% ttfdict scrldict scriptid <ttfReadScriptTable> ttfdict scrtdict
/ttfReadScriptTable {
	2 index begin
	{
		/DefaultLangSys n2 dup 0 ne {
			Offset add dup /default exch def
		} if def
		[ ( deflang=) DefaultLangSys ] aprintDebug
		/LangSysCount n2 def
		[ ( cnt=) LangSysCount ] aprintDebug
		LangSysCount tagoff
	} retr
	end
} prepproc bind def

% ttfdict scrtdict langid <ttfReadLangSysTable> ttfdict langdict
/ttfReadLangSysTable {
	2 index begin
	(LangSysTable ) aprintDebug
	{
		n2 0 ne { /ttflangsys-luorder trap } if
		/ReqFeatureIndex n2 def
		[ ( reqidx=) ReqFeatureIndex ] aprintDebug
		/FeatureCount n2 def
		[ ( cnt=) FeatureCount ] aprintDebug
		(\n  fturidx:) aprintVerbose
		/FeatureIndex FeatureCount idxtbl
	} retr
	end
} prepproc bind def

% ttfdict comdict <ttfReadFeatureList> ttfdict ftrldict ftrrec
/ttfReadFeatureList {
	1 index begin
	/FeatureList {
		/FeatureCount n2 def
		[ ( cnt=) FeatureCount ] aprintDebug
		/FeatureRecord FeatureCount array def
		FeatureRecord {
			[ (\n  ) 2 index (:) ] aprintVerbose
			<< /Tag b4 cvn [ ( tag=) 2 index ] aprintVerbose
			/Offset off2 [ ( off=) 2 index ] aprintVerbose >> put
		} for-elem
	} retr
	dup /FeatureRecord get
	end
} prepproc bind def

% ttfdict ftrrec idx <ttfReadFeatureTable> ttfdict ftrtdict luidxarray
/ttfReadFeatureTable {
	2 index begin
	(FeatureTable ) aprintDebug
	{
		/FeatureParams n2 def
		[ ( params=) FeatureParams ] aprintDebug
		FeatureParams 0 ne { /ttfftrt-params trap } if
		/LookupCount n2 def
		[ ( cnt=) LookupCount ] aprintDebug
		[ (\n  luplidx:) ] aprintVerbose
		/LookupListIndex LookupCount idxtbl
	} retr
	dup /LookupListIndex get
	end
} prepproc bind def

% ttfdict comdict <ttfReadLookupList> ttfdict lupldict luarray
/ttfReadLookupList {
	1 index begin
	/LookupList {
		/LookupCount n2 def
		[ ( cnt=) LookupCount ] aprintDebug
		(\n  offsets:) aprintVerbose
		/Lookup LookupCount offtbl
	} retr
	dup /Lookup get
	end
} prepproc bind def

% ttfdict luarray luidx <ttfReadLookupTable> ttfdict lutdict
/ttfReadLookupTable {
	2 index begin
	(LookupTable ) aprintDebug
	{
		/LookupType n2 def
		[ ( type=) LookupType ] aprintDebug
		/LookupFlag n2 def
		[ ( flag=) LookupFlag ] aprintDebug
		/SubTableCount n2 def
		[ ( cnt=) SubTableCount ] aprintDebug
		(\n  offsets:) aprintVerbose
		/SubTable SubTableCount offtbl
		LookupFlag 16#10 and 0 ne {
			/MarkFilteringSet n2 def
			[ (\n  filt=) MarkFilteringSet ] aprintDebug
		} if
	} retr
	end
} prepproc bind def

% ttf lsubdict covid <ttfReadCoverageTable> ttf lsubdict covdict
/ttfReadCoverageTable {
	2 index begin
	1 index exch
	{
		/CoverageFormat n2 def
		[ ( fmt=) CoverageFormat ] aprintDebug
		CoverageFormat 1 eq {
			/GlyphCount n2 def
			[ ( cnt=) GlyphCount ] aprintDebug
			(\n  cov:) aprintMoreVerbose
			/GlyphArray GlyphCount { idxtbl } moreverbose
			% create inverse table
			/CoverageLookup << GlyphArray {
				exch 1 index get exch
			} for-elem >> def
		} { CoverageFormat 2 eq {
			/RangeCount n2 def
			[ ( cnt=) RangeCount ] aprintDebug
			/CoverageLookup << RangeCount {
				/Start n2 def
				[ (\n  cov: start=) Start ] aprintVerbose
				/End n2 def
				[ ( end=) End ] aprintVerbose
				/StartCoverageIndex n2 def
				[ ( idx=) StartCoverageIndex ] aprintVerbose
				(\n    ->) aprintMoreVerbose
				Start 1 End {
					dup StartCoverageIndex add Start sub
					[ ( ) 3 index ] aprintMoreVerbose
				} for
			} repeat >> def
		} {
			/ttfcov-fmt1 trap
		} ifelse } ifelse
	} retr
	end
} prepproc bind def

% ttfdict <ttfReadGSUBTable> ttfdict gsubdict
/ttfReadGSUBTable {
	dup begin
	OffsetTable /GSUB {
		<00010000> ckver
		/ScriptList off2 def
		[ ( script=) ScriptList ] aprintDebug
		/FeatureList off2 def
		[ ( feature=) FeatureList ] aprintDebug
		/LookupList off2 def
		[ ( lookup=) LookupList ] aprintDebug
	} retr
	end
} prepproc bind def

subr begin

% substdict begin gid <ttfGSUBType1Subst*Lookup> gid' bool
/ttfGSUBType1Subst1Lookup {
	Coverage begin
	CoverageLookup 1 index known {
		DeltaGlyphID add 16#ffff and
		true
	} {
		false
	} ifelse
	end
} bind def

/ttfGSUBType1Subst2Lookup {
	Coverage begin
	CoverageLookup 1 index known {
		CoverageLookup exch get
		Substitute exch get
		true
	} {
		false
	} ifelse
	end
} bind def

% ttf subtblarray subtblidx <ttfReadGSUBLookupSubTable> ttf substdict
/ttfReadGSUBLookupType1SubTable {
	2 index begin
	(GSUB LookupType 1 SubTable ) aprintDebug
	{
		/SubstFormat n2 def
		[ ( fmt=) SubstFormat ] aprintDebug
		SubstFormat 1 eq {
			/Coverage off2 def
			[ ( cov=) Coverage ] aprintDebug
			/DeltaGlyphID n2 def
			[ ( delta=) DeltaGlyphID ] aprintDebug
			/Lookup /ttfGSUBType1Subst1Lookup load def
		} { SubstFormat 2 eq {
			/Coverage off2 def
			[ ( cov=) Coverage ] aprintDebug
			/GlyphCount n2 def
			[ ( cnt=) GlyphCount ] aprintDebug
			(\n  gids for substitute:) aprintMoreVerbose
			/Substitute GlyphCount { idxtbl } moreverbose
			/Lookup /ttfGSUBType1Subst2Lookup load def
		} {
			/ttf-gsub-subtbl trap
		} ifelse } ifelse
	} retr
	% read coverage
	/Coverage ttfReadCoverageTable pop
	end
} bind def

end % subr

% ttf lutdict <ttfReadGSUBLookupSubTable> ttf lutdict substarray
/ttfReadGSUBLookupSubTable {
	1 index begin
	dup begin
	LookupType 1 eq {
		SubTable length array dup {
			% ttf lutdict aray array index
			4 index SubTable 2 index ttfReadGSUBLookupType1SubTable
			exch pop put
		} for-elem
	} {
		/ttf-gsub-lookuptype trap
	} ifelse
	end end
} prepproc bind def

% ttfdict scriptid langid featureid <ttfFindGSUBTable>
%	ttfdict ftrrec ftridx true
%	ttfdict false
/ttfFindGSUBTable {
	3 dict begin
	/feature exch def
	/lang exch def
	/script exch def
	/ttf 1 index def
	/got false def
	1 {
		/GSUB ttfCheckSupport not { (no GSUB table\n) aprintVerbose exit } if
		ttfReadGSUBTable /gsub exch def
		gsub ttfReadScriptList /scrlst exch def
		gsub ttfReadFeatureList /ftrrec exch def pop
		scrlst script known not {
			[ (no ) script (Script\n) ] aprintVerbose exit
		} if
		scrlst script ttfReadScriptTable /scrtbl exch def
		[ lang /default ] {
			/id exch def
			scrtbl id known {
				scrtbl id ttfReadLangSysTable
				(Enumerate FeatureIndex:) aprintVerbose
				/FeatureIndex get {
					[ (\n  fidx=) 2 index ] aprintVerbose
					ftrrec 1 index get /Tag get
					[ ( tag=) 2 index ] aprintVerbose
					feature eq {
						/ftridx exch def
						/got true def
						(, found\n) aprintVerbose
						exit
					} if
					pop
				} forall
			} {
				[ (LangSysTable ) id ( is not found.\n) ] aprintVerbose
			} ifelse
			got { exit } if
		} forall
		got { exit } if
	} repeat
	got { ftrrec ftridx true } { false } ifelse
	end
} prepproc bind def

% ttfdict scptid langid fturid <ttfGetGSUBTable> ttfdict arrayofarray true
%	ttfdict false
/ttfGetGSUBTable {
	ttfFindGSUBTable {
		1 dict begin
		ttfReadFeatureTable	/lutidx exch def pop
		ttfReadGSUBTable
		ttfReadLookupList /lutlst exch def pop
		lutidx length array dup {
			3 index lutlst lutidx 3 index get ttfReadLookupTable
			ttfReadGSUBLookupSubTable
			3 -2 roll pop pop put
		} for-elem
		true
		end
	} {
		false
	} ifelse
} prepproc bind def

% dict substarray <ttfMergeCoverage> dict
/ttfMergeCoverage {
	dup type /dicttype eq {
		begin
		Coverage /CoverageLookup get {
			pop 2 copy known {
				pop
			} {
				dup Lookup
				{ 2 index 3 -2 roll put } { pop pop } ifelse
			} ifelse
		} forall
		end
	} {
		{ ttfMergeCoverage } forall
	} ifelse
} bind def

% ttf featuretable <ttfGetGSUBSubstDict> dict
/ttfGetGSUBSubstDict {
	1 dict begin
	/features exch def
	/ttfdict exch def
	[ ttfdict features {
		aload pop ttfGetGSUBTable {
			exch
		} if
	} forall pop ]
	1 dict exch ttfMergeCoverage
	{
		dup {
			exch [ << /W 7 >> 2 index ] aprint pop
			[ ( -> ) 2 index (\n) ] aprint pop
		} forall
	} ttfprocMoreVerbose
	end
} prepproc bind def

% ttfdict <ttfReadGlyhTable> ttfdict offset
%	just cache offset
/ttfReadGlyhTable {
	dup begin
	OffsetTable /glyf { } retr /Offset get
	end
} bind def

% ttfdict <ttfReadLocaTable> ttfdict locadict
/ttfReadLocaTable {
	dup begin
	OffsetTable /loca {
		FontFile Length string readstring
		not { /ttf-fail-to-read-loca trap } if
		/Data exch def
	} retr
	end
} bind def

% ttfdict <ttfCreateBBoxTable> ttfdict bboxtable
%	bboxtable[glyphindex] = [ xmin ymin xmax ymax ]
/ttfCreateBBoxTable {
	dup begin 1 dict begin
	ttfReadGlyhTable /goff exch def
	ttfReadLocaTable /Data get /Data exch def
	IndexToLocFormat 1 eq {
		/elemsize 4 def
		/posmul 1 def
	} {
		/ttf-unsupported-indexToLocFormat trap
	} ifelse
	/bboxtable NumGlyphs array def
	0 1 NumGlyphs 1 sub {
		Data 1 index elemsize getstrarray	% i str bool
		not { /ttf-loca-ovf trap } if	% i str
		str2num	posmul mul goff add	setpos	% i
		bboxtable exch % bboxtable i
		2 fwd [ 4 { i2 UnitsPerEm div } repeat ] put % -
	} for
	bboxtable end end
} bind def

% font cmap optdict <ttfFixupVerticalMode> font'
/ttfFixupVerticalMode {
	currentglobal false setglobal
	1 dict begin % dictionary is in local VM.
	/gflag exch def
	true setglobal % make VM mode global until getting necessary resources.

	/opt exch def
	dup type /dicttype eq { /CMapName get } if
	/cmapname exch def
	dup type /dicttype eq {
		dup /CIDFontName get /fontname exch def
	} {
		/fontname exch def
		fontname /CIDFont findresource
	} ifelse
	/cidfont exch def

	/CMap /Category findresource
	begin cmapname 256 string ResourceFileName end
	/cmapfilename exch def
	[ (getting filename for ) cmapname (: ) cmapfilename (\n) ] aprintDebug

	false setglobal % creating CMap and font. change VM mode to local.

	% get CMap
	/cmaplist cmapDefineCIDInitProcSet /CMapList get def
	cmapfilename (r) file dup cvx exec closefile
	cmapUndefineCIDInitProcSet

	% get TTF GSUB table
	cidfont ttfFindFontTable not { /ttf-notfound trap } if
	/ttfdict exch def
	ttfdict [
		[ /kana (JAN ) /vert ]
		[ /hani (JAN ) /vert ]
	] ttfGetGSUBSubstDict
	/vertsubst exch def

	% copy and fixup font
	cidfont copyfont begin % cidfont
	currentdict /subst_CID_on_WMode undef
	/FontType 42 def
	/DEVICE /defaultdevice defaultload /pdfwrite ne {
		/CIDSystemInfo <<
			/Registry (Artifex)
			/Ordering (Identity)
			/Supplement 0
		>> readonly def
	} if

	(fixup CIDMap for vertical writing mode ... ) aprintDebug
	/OriginalCIDMap CIDMap def
	/CIDMap CIDMap copyCIDMap def

	1 dict begin	% vertical-subst
	/vcodemap cmaplist cmapname get /CodeMap get def
	1 {
		/basecmap vcodemap /BaseCMaps get def
		basecmap length 1 gt {
			/ttfvert-toomanybasecmaps trap
		} if
		basecmap length 1 ne {
			(no base cmap) aprintDebug exit
		} if
		/hcmap basecmap 0 get def

		vcodemap /ForwardCMap get {
			/vcid exch def
			/mapchar exch def
			[ (\n  ) << /S /hex >> mapchar ] aprintVerbose
			[ (: vcid=) << /W 6 /A /left >> vcid ] aprintVerbose
			1 {
				hcmap mapchar cmapLookupForwardCMap not {
					(no horizchar) aprintVerbose exit
				} if
				/hcid exch def
				[ (hcid=) << /W 6 /A /left >> hcid ] aprintVerbose

				OriginalCIDMap hcid GDBytes getstrarray not {
					(no glyph) aprintVerbose exit
				} if
				str2num /hgid exch def
				[ (hgid=) << /W 6 /A /left >> hgid ] aprintVerbose

				vertsubst hgid known not {
					(no subst) aprintVerbose exit
				} if
				/vgid vertsubst hgid get def
				[ (vgid=) << /W 6 /A /left >> vgid ] aprintVerbose

				CIDMap vcid GDBytes getstrarray not {
					(no gid in cidmap) aprintVerbose exit
				} if
				[ (\(orig=) 2 index str2num (\))] aprintVerbose
				vgid exch num2str pop
			} repeat
		} forall
	} repeat
	(\n) aprintVerbose
	(done.\n) aprintDebug

	end	% vertical-subst

	1 dict begin	% dict for CDevProc
	(creating CDevProc ... ) aprintDebug
	/aprintVerbose dup load def
	/ttfprocVerbose dup load def
	ttfdict ttfReadHeadTable ttfReadMaxpTable ttfReadOS2Table
	ttfCreateBBoxTable /bbox exch def
	dup /TypoAscender get /vy exch def
	ttfReadHmtxTable dup /AdvanceDistance get /hw exch def
	opt /UseLeftSideBearing false defaultget
	dup /uselsb exch def pop true {
		dup /LeftSideBearing get /lsb exch def
	} if
	opt /VOrgFromVAdvance false defaultget /usevadv exch def
	pop
	/hwmax hw length 1 sub def
	/CIDMap CIDMap def
	/GDBytes GDBytes def
	/getstrarray dup load def
	/exec-forall dup load def
	/str2num dup load def
	/vmtx ttfCheckSupport {
		ttfReadVmtxTable dup /AdvanceDistance get /vw exch def
		/LeftSideBearing get /tsb exch def
		/vwmax vw length 1 sub def
	} {
		(no vmtx table, use fixed vertical pitch, ) aprintDebug
		/vw [ 1 ] def
		/vwmax 0 def
	} ifelse
	/CDevProc [
		currentdict end	% dict for CDevProc
		{
			begin 1 dict begin
			/cid exch def
			10 array astore /a exch def
			/g CIDMap cid GDBytes getstrarray { str2num } { 0 } ifelse def
			a 0 g hwmax lt { hw g get } { hw hwmax get } ifelse put
			a 1 0 put
			a 6 0 put
			a 7 g vwmax lt { vw g get } { vw vwmax get } ifelse neg put
			uselsb {
				a 8 a 2 get lsb g get sub a 0 get 0.5 mul add put
			} {
				a 8 a 0 get 0.5 mul put
			} ifelse
			[ g ( ) bbox g get { ( ) } forall lsb g get ( ) tsb g get ( ) a 7 get (\n) ] aprintVerbose
			% a 9 vy put
			usevadv {
%				a 9 bbox g get dup 3 get exch 1 get add
%					a 7 get sub 0.5 mul put
				a 9 a 7 get neg tsb g get add put
			} {
				a 9 tsb g get bbox g get 3 get add put
			} ifelse
			% cid 1 and 231 is half width space.
			% change height to its width in case of vertical writing.
			false [ 1 231 ] { cid eq { pop true exit } if } forall
			{ a 7 a 0 get neg put } if
			a aload pop
			end end
		} { } forall
	] cvx bind def
	(done.\n) aprintDebug

	ttfCloseFontFile

	currentdict end % cidfont
	fontname exch /CIDFont defineresource

	gflag setglobal
	end
} prepproc bind def

% fontname cmapname <ttfComposeVerticalFont> font
% fontname cmapname optdict <ttfComposeVerticalFont> font
/ttfComposeVerticalFont {
	3 dict begin
	dup type /dicttype ne { << >> } if
	/opt exch def
	/cmapname exch def
	/fontname exch def
	fontname strdup (-) strcat cmapname strdup strcat
	cmapname [ fontname cmapname opt ttfFixupVerticalMode ] composefont
	end
} prepproc bind def

% fontname cmapname <ttfFindVerticalFont> font
% fontname cmapname optdict <ttfFindVerticalFont> font
%	find verticalfont specified by fontname and cmapname from
%	ttfVerticalFontCache. If the font is not found in the cache,
%	call ttfComposeVerticalFont and cache it.
%	ttfVerticalFontCache is created in userdict automatically.
/ttfFindVerticalFont {
	dup type /dicttype ne { << >> } if
	currentglobal false setglobal
	6 dict begin
	/PreviousGlobal exch def
	userdict /ttfVerticalFontCache 2 copy known {
		get /fontcache exch def
	} {
		1 dict dup /fontcache exch def put
	} ifelse
	/opt exch def
	/cmapname exch def
	/fontname exch def
	/vcfn fontname <00> strcat cmapname strcat def
	fontcache vcfn known {
		fontcache vcfn get
	} {
		fontname cmapname opt ttfComposeVerticalFont
		fontcache vcfn 2 index put
	} ifelse
	PreviousGlobal setglobal
	end
} prepproc bind def

/ttfproc.ps.akamoz.jp currentdict /ProcSet defineresource pop
end % ttfproc.ps.akamoz.jp
end % localdict

setglobal

{
	1 dict begin
	/util.ps.akamoz.jp /ProcSet findresource { def } forall
	/ttfproc.ps.akamoz.jp /ProcSet findresource begin
	1 dict begin % localdict
	/encodings [
		<<
			/HCmap /90ms-RKSJ-H
			/VCmap /90ms-RKSJ-V
			/Arrows <81aa81ab81a981a8>
			/Katakana <8175834c8383836283608383815b81498176>
			/Ansi (abc)
			/PuncSpace <816d20816e816d8140816e>
		>>
		<<
			/HCmap /EUC-H
			/VCmap /EUC-V
			/Arrows <a2aca2ada2aba2aa>
			/Katakana <a1d6a5ada5e3a5c3a5c1a5e3a1bca1aaa1d7>
			/Ansi (abc)
			/PuncSpace <a1ce20a1cfa1cea1a1a1cf>
		>>
		<<
			/HCmap /UniJIS-UTF16-H
			/VCmap /UniJIS-UTF16-V
			/Arrows <2191219321902192>
			/Katakana <300c30ad30e330c330c130e330fcff01300d>
			/Ansi <006100620063>
			/PuncSpace <fe41fe42ff3b0020ff3dff3b3000ff3d>
		>>
		<<
			/HCmap /UniJIS-UTF32-H
			/VCmap /UniJIS-UTF32-V
			/Arrows <00002191000021930000219000002192>
			/Katakana <0000300c000030ad000030e3000030c3000030c1000030e3000030fc0000ff010000300d>
			/Ansi <000000610000006200000063>
			/PuncSpace <0000ff3b000000200000ff3d0000ff3b000030000000ff3d>
		>>
	] def
	/fonts [
		/MS-PMincho /MS-Mincho /MS-PGothic /MS-Gothic
		/IPAexMincho /DFPKaiSho-Md
	] def

	fonts {
		/f exch def
		encodings {
			begin
			(---------------------------------------------------------\n) print
			24 24 scale
			0 33 translate
			/Courier findfont 0.7 scalefont setfont
			1 -1 moveto
			f strdup show
			( ) show
			HCmap strdup show
			( ) show
			VCmap strdup show

			f VCmap << >> ttfFixupVerticalMode pop

			currentglobal false setglobal
			/test-V VCmap [ f ] composefont setfont
			setglobal
			1 -2 moveto
			Arrows show
			Katakana show
			Ansi show
			PuncSpace show

			currentglobal false setglobal
			/test-H HCmap [ f ] composefont setfont
			setglobal
			-0.5 -1.5 rmoveto
			Arrows show
			Katakana show
			Ansi show
			PuncSpace show

			showpage
			end
		} forall
	} forall
	end % localdict
	end % ttfproc.ps.akamoz.jp

	/end dstack
	[ (dictstack depth: ) countdictstack (\n) ] aprintDebug
	end
} pop
